server:
  port: 8080

spring:
  main.banner-mode: 'off'
  profiles:
    active: default
  flyway:
    enabled: true
  datasource:
    url: "jdbc:postgresql://${NAIS_DATABASE_SPINNSYN_BACKEND_SPINNSYN_DB_HOST}:${NAIS_DATABASE_SPINNSYN_BACKEND_SPINNSYN_DB_PORT}/${NAIS_DATABASE_SPINNSYN_BACKEND_SPINNSYN_DB_DATABASE}?reWriteBatchedInserts=true"
    username: ${NAIS_DATABASE_SPINNSYN_BACKEND_SPINNSYN_DB_USERNAME}
    password: ${NAIS_DATABASE_SPINNSYN_BACKEND_SPINNSYN_DB_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 5
      connection-timeout: 60000
      idle-timeout: 300000
      max-lifetime: 600000

aiven-kafka:
  auto-offset-reset: none
  security-protocol: SSL

management:
  endpoint.prometheus.enabled: true
  endpoints.web:
    base-path: /internal
    exposure.include: health,prometheus

logging.config: "classpath:logback.xml"

pdl.api.url: ${PDL_BASE_URL}

syfo-tilgangskontroll.url: ${SYFOTILGANGSKONTROLL_URL}
nais.cluster: ${NAIS_CLUSTER_NAME}

no.nav.security.jwt:
  issuer:
    azureator:
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
      accepted_audience: ${AZURE_APP_CLIENT_ID}
    tokenx:
      discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
      accepted_audience: ${TOKEN_X_CLIENT_ID}
  client:
    registration:
      pdl-api-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${PDL_API_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      onbehalfof-syfotilgangskontroll:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
        scope: api://${SYFOTILGANGSKONTROLL_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
